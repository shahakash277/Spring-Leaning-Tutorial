package com.example.demo.jpaconfig;

import javax.sql.DataSource;

import org.postgresql.xa.PGXADataSource;
import org.springframework.boot.jta.atomikos.AtomikosDataSourceBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
import org.springframework.orm.jpa.JpaVendorAdapter;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;

@Configuration
@EnableJpaRepositories(entityManagerFactoryRef = "demoEntityManager", transactionManagerRef = "domainsTransactionManager", basePackages = "com.example")
public class JPAConfig {

    @Bean("demoEntityManager")
    public LocalContainerEntityManagerFactoryBean entityManagerFactoryBean() {
        JpaVendorAdapter vendorAdapter = new HibernateJpaVendorAdapter();
        LocalContainerEntityManagerFactoryBean em = new LocalContainerEntityManagerFactoryBean();
        em.setDataSource(dataSource());
        return null;
    }

    @Bean
    public DataSource dataSource() {
        PGXADataSource postgresXA = new PGXADataSource();
        postgresXA.setUrl("jdbc:postgresql://localhost:5432/demodb");
        postgresXA.setUser("postgres");
        
        postgresXA.setPassword("postgres");
        AtomikosDataSourceBean xaDataSource = new AtomikosDataSourceBean();
        xaDataSource.setXaDataSource(postgresXA);
        xaDataSource.setBorrowConnectionTimeout(2 * 60); // Seconds ~ 2 Minutes
        xaDataSource.setMinPoolSize(5);
        xaDataSource.setMaxPoolSize(10);
        xaDataSource.setUniqueResourceName("postgresDbXA");
        
        return postgresXA;
    }
}
